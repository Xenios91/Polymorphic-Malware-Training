#include <Windows.h>
#include <string>
#include <stdio.h>
#include <memory.h>
#include <synchapi.h>

using namespace std;

void function1(void);
void function2(void);
int changeAddressSpacePermissions(void (*funcPtr1)(void), void (*funcPtr2)(void));

int swapFunctionWithShellCode() {

    //get function1 pointer
    void (*funcPtr1)(void);
    funcPtr1 = &function1;
    //get function2 pointer
    void (*funcPtr2)(void);
    funcPtr2 = &function1;

    //change permissions of function1's address space to allow writing to the instruction set.
    changeAddressSpacePermissions(funcPtr1, funcPtr2);

    for (int i = 0; i < 5; i++) {
        puts("Calling function1");
        function1();
        Sleep(1000);
    }

    char shellcode[] =
        "\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42"
        "\x08\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03"
        "\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b"
        "\x34\xaf\x01\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e"
        "\x08\x45\x78\x69\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c"
        "\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x53\x55"
        "\x21\x01\x68\x6c\x6f\x20\x44\x68\x20\x48\x65\x6c\x89\xe1\xfe"
        "\x49\x0b\x31\xc0\x51\x50\xff\xd7";

    //overwrite function1 instructions with shellcode
    memcpy(funcPtr1, shellcode, sizeof(shellcode) - 1);
    
    puts("Calling function1 with shellcode overwrite to create popup window");
    //function1 instructions now should be shellcode, lets execute it
    function1();
    puts("taadaa, self mutating code with polymorphic toy example");
    return 0;
}

void function1(void) {
    printf("%s\n", "Function 1 is running\n");
}

void function2(void) {}

int changeAddressSpacePermissions(void (*funcPtr1)(void), void (*funcPtr2)(void)) {
    //get address space size we need to modify
    size_t size = (&funcPtr2 - &funcPtr1);
    DWORD thingy = 0;
    //set function1 address space to execute/read/write.
    bool worked = VirtualProtect(funcPtr1, size, PAGE_EXECUTE_READWRITE, &thingy);

    return 0;
}

int writeSource(const string* sourceCode) {
    // Open a handle to the file
    HANDLE hFile = CreateFile(
        L"C:\\Users\\hartm\\Downloads\\new_source.cpp",     // Filename
        GENERIC_WRITE,          // Desired access
        FILE_SHARE_READ,        // Share mode
        NULL,                   // Security attributes
        CREATE_NEW,             // Creates a new file, only if it doesn't already exist
        FILE_ATTRIBUTE_NORMAL,  // Flags and attributes
        NULL);                  // Template file handle

    if (hFile == INVALID_HANDLE_VALUE)
    {
        // Failed to open/create file
        return 2;
    }

    DWORD bytesWritten;
    WriteFile(
        hFile,            // Handle to the file
        sourceCode->c_str(),  // Buffer to write
        sourceCode->size(),   // Buffer size
        &bytesWritten,    // Bytes written
        nullptr);         // Overlapped

     // Close the handle once we don't need it.
    CloseHandle(hFile);
}

void getSource1(string *sourceCode) {
    sourceCode->assign("#include <stdio.h>\n #include <memory.h>\n #include <Windows.h>\n void function1(void);\n void function2(void);\n int changeAddressSpacePermissions(void (*funcPtr1)(void), void (*funcPtr2)(void));\n int swapFunctionWithShellCode() { void (*funcPtr1)(void);\n funcPtr1 = &function1;\n void (*funcPtr2)(void);\n funcPtr2 = &function1;\n changeAddressSpacePermissions(funcPtr1, funcPtr2);\n puts(\"Calling function1\");\n function1();\n char shellcode[] = ");
}

void getSource2(string* sourceCode) {
    sourceCode->append(" for (int i = 0; i < 117; i++) { shellcodeBuffer[i] = shellcodeBuffer[i] - 1; } memcpy(funcPtr1, shellcode, sizeof(shellcode) - 1);\n puts(\"Calling function1\");\n function1();\n puts(\"taadaa, self mutating code\");\n return 0;\n } void function1(void) { printf(\"%s\n\", \"Function 1 is running\");\n } void function2(void) {} int changeAddressSpacePermissions(void (*funcPtr1)(void), void (*funcPtr2)(void)) { size_t size = (&funcPtr2 - &funcPtr1);\n DWORD thingy = 0;\n  bool worked = VirtualProtect(funcPtr1, size, PAGE_EXECUTE_READWRITE, &thingy);\n return 0;\n } int main(void) { swapFunctionWithShellCode();\n }");
}

int main()
{
    string sourceCode;
    getSource1(&sourceCode);

    char shellcodeBuffer[117];
    char shellCode[115] = "\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42"
        "\x08\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03"
        "\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b"
        "\x34\xaf\x01\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e"
        "\x08\x45\x78\x69\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c"
        "\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x53\x55"
        "\x21\x01\x68\x6c\x6f\x20\x44\x68\x20\x48\x65\x6c\x89\xe1\xfe"
        "\x49\x0b\x31\xc0\x51\x50\xff\xd7";   

    for (int i = 0; i < 117; i++) {
        shellcodeBuffer[i] = shellcodeBuffer[i] + 1;
    }

    snprintf(shellcodeBuffer, 117, "\"%s\";\n", shellCode);


    for (int i = 0; i < 117; i++) {
        sourceCode.push_back(shellcodeBuffer[i]);
    }

    getSource2(&sourceCode);

    int success = writeSource(&sourceCode);
    if (success == 0) {
        puts("yay");
    }
    swapFunctionWithShellCode();
}